<template>
  <div class="container">
    <div class="content">
      <div class="header">
        <top-bar title="我的收藏"></top-bar>
        <div class="tab-bar">
          <div class="tab-item" v-for="(item,index) in tabs"
               :class="{'active':index===tabIndex}" :key="index"
               @tap="onHandleTabChange(index)">
            <div class="tab-text">{{item.label}}</div>
          </div>
        </div>
      </div>
      <div class="body">
        <swiper class="tab-swiper" current="{{current}}" @change="onHandleSwiperChange">
          <swiper-item class="tab-content">
            <loading :isLoading="isRentLoading&&!isRentData.rows.length"></loading>
            <error :isFailure="isRentFailure&&!isRentData.rows.length" @refresh="onRefresh"></error>
            <empty :isSuccess="isRentSuccess&&!isRentData.rows.length"></empty>
            <div class="context fade" v-if="isRentData.rows.length">
              <scroll-view class="scroll-view"
                           scroll-y="{{true}}"
                           @scrolltolower="onHandleScrollToLower">
                <div class="items">
                  <block v-for="(item,index) in isRentData.rows" :key="index">
                    <rent-house-item :item="item"></rent-house-item>
                  </block>
                </div>
                <load-more :length="isRentData.rows.length" :totalCount="isRentData.totalCount"></load-more>
              </scroll-view>
            </div>
          </swiper-item>
          <swiper-item class="tab-content">
            <loading :isLoading="isSecondLoading&&!isSecondData.rows.length"></loading>
            <error :isFailure="isSecondFailure&&!isSecondData.rows.length" @refresh="onRefresh"></error>
            <empty :isSuccess="isSecondSuccess&&!isSecondData.rows.length"></empty>
            <div class="context fade" v-if="isSecondData.rows.length">
              <scroll-view class="scroll-view"
                           scroll-y="{{true}}"
                           @scrolltolower="onHandleScrollToLower">
                <div class="items">
                  <block v-for="(item,index) in isSecondData.rows" :key="index">
                    <second-house-item :item="item"></second-house-item>
                  </block>
                </div>
                <load-more :length="isSecondData.rows.length" :totalCount="isSecondData.totalCount"></load-more>
              </scroll-view>
            </div>
          </swiper-item>
          <swiper-item class="tab-content">
            <loading :isLoading="isNewLoading&&!isNewData.rows.length"></loading>
            <error :isFailure="isNewFailure&&!isNewData.rows.length" @refresh="onRefresh"></error>
            <empty :isSuccess="isNewSuccess&&!isNewData.rows.length"></empty>
            <div class="context fade" v-if="isNewData.rows.length">
              <scroll-view class="scroll-view"
                           scroll-y="{{true}}"
                           @scrolltolower="onHandleScrollToLower">
                <div class="items">
                  <block v-for="(item,index) in isNewData.rows" :key="index">
                    <new-house-item :item="item"></new-house-item>
                  </block>
                </div>
                <loading-more :length="isNewData.rows.length"
                              :totalCount="isNewData.totalCount"></loading-more>
              </scroll-view>
            </div>
          </swiper-item>
        </swiper>
      </div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
  import wepy from '@wepy/core';
  import store from '../../../store/index';
  import {mapState, mapActions} from '@wepy/redux';
  import * as controller from './controller';
  import Toast from '../../../mixins/toast';

  wepy.page({
    store,

    mixins: [Toast],

    data: {
      timer: null,
      pageSize: 10,
      tabIndex: 0,
      tabs: [
        {
          label: '租房',
          type: 3,
          pageIndex: 1
        },
        {
          label: '二手房',
          type: 2,
          pageIndex: 1
        },
        {
          label: '新房',
          type: 1,
          pageIndex: 1
        }
      ],
      current: 0
    },

    computed: {
      ...mapState(controller.STATES)
    },
    methods: {
      ...mapActions(controller.ACTIONS),
      onHandleTabChange(index) {
        this.tabIndex = index;
        this.current = this.tabIndex;
        const type = this.tabs[this.tabIndex].type;
        if (this.tabTimer) clearInterval(this.tabTimer);
        this.tabTimer = setTimeout(() => {
          if (type === 1 && this.isNewLoading) {
            this.exeAjaxHouseFavorite();
          } else if (type === 2 && this.isSecondLoading) {
            this.exeAjaxHouseFavorite();
          } else if (type === 3 && this.isRentLoading) {
            this.exeAjaxHouseFavorite();
          }
        }, 500);
      },
      onHandleSwiperChange(e) {
        const current = e.$wx.detail.current;
        this.tabIndex = current;
        this.current = current;
        const type = this.tabs[this.tabIndex].type;
        if (this.tabTimer) clearInterval(this.tabTimer);
        this.tabTimer = setTimeout(() => {
          if (type === 1 && this.isNewLoading) {
            this.exeAjaxHouseFavorite();
          } else if (type === 2 && this.isSecondLoading) {
            this.exeAjaxHouseFavorite();
          } else if (type === 3 && this.isRentLoading) {
            this.exeAjaxHouseFavorite();
          }
        }, 500);
      },
      resetParams() {
        this.tabs.map((item) => {
          item.pageIndex = 1;
        });
      },
      exeAjaxHouseFavorite() {
        const params = {
          page: {
            pageSize: this.pageSize,
            pageIndex: this.tabs[this.tabIndex].pageIndex
          },
          filter: [
            {
              field: 'type',
              opt: '=',
              value: this.tabs[this.tabIndex].type
            }
          ]
        };
        this.ajaxHouseFavorite(params)
          .then((res) => {
            const {success} = res.payload;
            if (success) {
              const type = params.filter[0].value;
              this.tabs.map((item) => {
                if (item.type === type) {
                  item.pageIndex++;
                }
              });
            } else {

            }
            this.timer = null;
            console.log(res);
          })
          .catch((err) => {
            this.timer = null;
            console.log(err);
          });
      },
      onHandleScrollToLower() {
        if (this.timer) return;
        this.timer = setTimeout(() => {
          const type = this.tabs[this.tabIndex].type;
          if (type === 1) {
            const {rows, totalCount} = this.isNewData;
            if (rows.length < totalCount) {
              this.exeAjaxHouseFavorite();
            }
          } else if (type === 2) {
            const {rows, totalCount} = this.isSecondData;
            if (rows.length < totalCount) {
              this.exeAjaxHouseFavorite();
            }
          } else if (type === 3) {
            const {rows, totalCount} = this.isRentData;
            if (rows.length < totalCount) {
              this.exeAjaxHouseFavorite();
            }
          }
        }, 1000);
      },
      onRefresh() {
        this.exeAjaxHouseFavorite();
      }
    },

    onLoad() {
      this.resetParams();
      this.resetHouseFavorite();
      this.exeAjaxHouseFavorite();
    }
  });
</script>

<style scoped lang="less">
  @import "../../../assets/less/variable";

  .container {
    min-height: 100vh;
    .content {
      height: 100vh;
      .header {
        .tab-bar {
          width: 100%;
          display: flex;
          flex-wrap: wrap;
          position: fixed;
          top: unit(130, rpx);
          left: 0;
          z-index: 1000;
          background-color: @white;
          box-shadow: 0 5px 5px rgba(0, 0, 0, 0.03);
          font-size: @fontSize28;
          text-align: center;
          color: @fontColor2;
          .tab-item {
            width: 33.333%;
            position: relative;
            padding: unit(20, rpx) 0;
            .tab-text {
              height: unit(40, rpx);
              line-height: unit(40, rpx);
              transition: all 300ms ease;
              border-right: 0.5px solid @borderColor1;
            }
            &:after {
              content: '';
              width: 0px;
              display: block;
              position: absolute;
              left: 50%;
              bottom: 0;
              opacity: 0;
              visibility: hidden;
              transform: translateX(-50%);
              transition: all 300ms ease;
              border-top: unit(6, rpx) solid @theme2;
            }
            &.active {
              color: @theme2;
              &:after {
                opacity: 1;
                visibility: visible;
                width: unit(120, rpx);
              }
            }
            &:last-child {
              .tab-text {
                border: none;
              }
            }
          }
        }
      }
      .body {
        height: 100%;
        .tab-swiper {
          height: 100%;
          position: relative;
          .context {
            height: 100%;
            padding-top: unit(210, rpx);
            .scroll-view {
              height: 100%;
            }
          }
        }
      }
      .footer {
      }
    }
  }
</style>

<config>
  {
  navigationStyle:'custom',
  usingComponents: {
  'top-bar': '../../../components/top-bar/top-bar',
  'loading': '../../../components/loading/loading',
  'error': '../../../components/error/error',
  'empty': '../../../components/empty/empty',
  'loading-more': '../../../components/loading-more/loading-more',
  'new-house-item': '../../../components/new-house-item/new-house-item',
  'second-house-item': '../../../components/second-house-item/second-house-item',
  'rent-house-item': '../../../components/rent-house-item/rent-house-item'
  }
  }
</config>
