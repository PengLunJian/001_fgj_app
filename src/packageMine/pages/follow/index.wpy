<template>
  <div class="container">
    <div class="content">
      <div class="header">
        <top-bar title="我的收藏"/>
        <div class="tab-bar">
          <div class="tab-item" v-for="(item,index) in tab.items"
               :class="{'active':index===tab.activeIndex}" :key="index"
               @tap="onHandleTabChange(index)">
            <div class="tab-text">{{item}}</div>
          </div>
        </div>
      </div>
      <div class="body">
        <loading :isLoading="isLoading&&!isData.rows.length"></loading>
        <error :isFailure="isFailure&&!isData.rows.length" @refresh="onRefresh"></error>
        <empty :isSuccess="isSuccess&&!isData.rows.length"></empty>
        <div class="context fade" v-if="isData.rows.length">
          <scroll-view class="scroll-view"
                       scroll-y="{{true}}"
                       @scrolltolower="onHandleScrollToLower">
            <div class="items">
              <house-item v-for="(item,index) in isData.rows" :item="item" :key="index"/>
            </div>
            <loading-more :length="isData.rows.length" :totalCount="isData.totalCount"/>
          </scroll-view>
        </div>
      </div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
  import wepy from '@wepy/core';
  import store from '../../../store/index';
  import Toast from '../../../mixins/toast';
  import Storage from '../../../mixins/storage';
  import {mapState, mapActions} from '@wepy/redux';
  import * as controller from './controller';

  wepy.page({
    store,

    mixins: [Toast, Storage],

    data: {
      timer: null,
      pageSize: 10,
      pageIndex: 1,
      tab: {
        activeIndex: 0,
        items: ['新房', '二手房', '租房']
      }
    },

    computed: {
      ...mapState(controller.STATES)
    },
    methods: {
      ...mapActions(controller.ACTIONS),
      onHandleTabChange(index) {
        if (this.timer) return;
        this.timer = setTimeout(() => {
          this.pageIndex = 1;
          this.tab.activeIndex = index;
          this.removeFollowReplace();
          this.exeAjaxSelectFollow();
        }, 0);
      },
      exeAjaxSelectFollow() {
        const data = this.isData || {};
        const rows = data.rows || [];
        const params = this.getParams();
        this.ajaxSelectFollow(params)
          .then((res) => {
            const {success} = res.payload;
            if (success) {
              this.pageIndex++;
            } else {
              if (rows.length) {
                this.showToast('加载失败，请重试');
              }
            }
            this.timer = null;
            console.log(res);
          })
          .catch((err) => {
            if (rows.length) {
              this.showToast('加载失败，请重试');
            }
            this.timer = null;
            console.log(err);
          });
      },
      onHandleScrollToLower() {
        if (this.timer) return;
        this.timer = setTimeout(() => {
          const {rows, totalCount} = this.isData;
          if (rows.length < totalCount) {
            this.exeAjaxSelectFollow();
          } else {
            this.timer = null;
          }
        }, 0);
      },
      getParams() {
        const {pageSize, pageIndex} = this;
        const {phone} = this.getItem('user');
        const type = this.tab.activeIndex + 1;
        const params = {
          pageSize,
          pageIndex,
          phone,
          type
        };
        return params;
      },
      onRefresh() {
        this.exeAjaxSelectFollow();
      }
    },

    onLoad() {
      this.removeFollowReplace();
      this.exeAjaxSelectFollow();
    }
  });
</script>

<style scoped lang="less">
  @import "../../../assets/less/variable";

  .container {
    min-height: 100vh;
    .content {
      height: 100vh;
      .header {
        .tab-bar {
          width: 100%;
          display: flex;
          flex-wrap: wrap;
          position: fixed;
          top: 65px;
          left: 0;
          z-index: 1000;
          background-color: @white;
          box-shadow: 0 0 15px @boxShadow1;
          font-size: @fontSize28;
          text-align: center;
          color: @fontColor2;
          .tab-item {
            width: 33.333%;
            position: relative;
            padding: unit(20, rpx) 0;
            .tab-text {
              height: unit(40, rpx);
              line-height: unit(40, rpx);
              transition: all 300ms ease;
              border-right: 0.5px solid @borderColor1;
            }
            &:after {
              content: '';
              width: 0px;
              display: block;
              position: absolute;
              left: 50%;
              bottom: 0;
              opacity: 0;
              visibility: hidden;
              transform: translateX(-50%);
              transition: all 300ms ease;
              border-top: unit(6, rpx) solid @theme2;
            }
            &.active {
              color: @theme2;
              &:after {
                opacity: 1;
                visibility: visible;
                width: unit(120, rpx);
              }
            }
            &:last-child {
              .tab-text {
                border: none;
              }
            }
          }
        }
      }
      .body {
        height: 100%;
        position: relative;
        .context {
          height: 100%;
          padding-top: unit(210, rpx);
          .scroll-view {
            height: 100%;
          }
        }
      }
      .footer {
      }
    }
  }
</style>

<config>
  {
  navigationStyle:'custom',
  usingComponents: {
  'error': '../../../components/error/error',
  'empty': '../../../components/empty/empty',
  'loading': '../../../components/loading/loading',
  'top-bar': '../../../components/top-bar/top-bar',
  'house-item': '../../../components/house-item/house-item',
  'loading-more': '../../../components/loading-more/loading-more',
  }
  }
</config>
