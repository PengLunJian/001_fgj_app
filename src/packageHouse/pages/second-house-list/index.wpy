<template>
  <div class="container">
    <div class="content">
      <div class="header">
        <top-bar title="房源列表"/>
        <div class="tab-bar">
          <div v-for="(item,index) in tab.items"
               class="tab-item"
               :class="{'active':tab.activeIndex===index}"
               @tap="onHandleTabChange(index)">
            <div class="tab-text">
              <span class="tab-label">{{item.label}}</span>
            </div>
          </div>
        </div>
      </div>
      <div class="body">
        <loading :isLoading="isLoading&&!isData.rows.length"/>
        <error :isFailure="isFailure&&!isData.rows.length" @refresh="onRefresh"/>
        <empty :isSuccess="isSuccess&&!isData.rows.length"/>
        <div class="context tab fade" v-if="isData.rows.length">
          <scroll-view
            class="scroll-view"
            scroll-y="{{isScroll}}"
            @scrolltolower="onHandleScrollToLower">
            <div class="items">
              <house-item v-for="(item,index) in isData.rows" :item="item" :key="index"/>
            </div>
            <loading-more :length="isData.rows.length" :totalCount="isData.totalCount"/>
          </scroll-view>
        </div>
      </div>
      <div class="footer"></div>
      <div class="modal tab" id="address" :class="{'hide':!tab.items[0].isShow}">
        <div class="modal-bg" @tap="onHandleCloseModal"></div>
        <div class="modal-content">
          <div class="modal-header"></div>
          <div class="modal-body">
            <div class="modal-addr">
              <div class="modal-city">
                <div class="modal-city-item">{{isCity.fullname}}</div>
              </div>
              <div class="modal-area">
                <scroll-view class="scroll-view" scroll-y="{{true}}">
                  <div class="modal-area-item" v-for="(item,index) in btnArea.items"
                       :class="{'active':index===btnArea.activeIndex}"
                       @tap="onHandleChooseArea(index)">{{item.fullname}}
                  </div>
                </scroll-view>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <div class="modal-button">
              <div class="btn btn-clear" @tap="onHandleClearArea">重置</div>
              <div class="btn btn-confirm" @tap="onHandleConfirmArea">确定</div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal tab" id="filter" :class="{'hide':!tab.items[1].isShow}">
        <div class="modal-bg" @tap="onHandleCloseModal"></div>
        <div class="modal-content">
          <div class="modal-header"></div>
          <div class="modal-body">
            <scroll-view class="scroll-view" scroll-y="{{true}}">
              <div class="modal-group">
                <div class="modal-block">
                  <div class="modal-label">户型</div>
                  <div class="modal-row row">
                    <div class="modal-col col-3"
                         v-for="(item,index) in btnLayout.items"
                         :class="{'active':index===btnLayout.activeIndex}">
                      <div class="btn-item btn-layout" @tap="onHandleLayoutFilter(index)">{{item.label}}</div>
                    </div>
                  </div>
                  <div class="modal-split"></div>
                </div>
              </div>
              <div class="modal-group">
                <div class="modal-block">
                  <div class="modal-label">装修</div>
                  <div class="modal-row row">
                    <div class="modal-col col-3"
                         v-for="(item,index) in btnStyle.items"
                         :class="{'active':index===btnStyle.activeIndex}">
                      <div class="btn-item btn-style" @tap="onHandleStyleFilter(index)">{{item.label}}</div>
                    </div>
                  </div>
                  <div class="modal-split"></div>
                </div>
              </div>
              <div class="modal-group">
                <div class="modal-block">
                  <div class="modal-label">朝向</div>
                  <div class="modal-row row">
                    <div class="modal-col col-3"
                         v-for="(item,index) in btnDirection.items"
                         :class="{'active':index===btnDirection.activeIndex}">
                      <div class="btn-item btn-direction" @tap="onHandleDirectionFilter(index)">{{item.label}}</div>
                    </div>
                  </div>
                  <div class="modal-split"></div>
                </div>
              </div>
              <div class="modal-group">
                <div class="modal-block">
                  <div class="modal-label">楼层</div>
                  <div class="modal-row row">
                    <div class="modal-col col-3"
                         v-for="(item,index) in btnFloor.items"
                         :class="{'active':index===btnFloor.activeIndex}">
                      <div class="btn-item btn-floor" @tap="onHandleFloorFilter(index)">{{item.label}}</div>
                    </div>
                  </div>
                  <div class="modal-split"></div>
                </div>
              </div>
              <div class="modal-group">
                <div class="modal-block">
                  <div class="modal-label">价格</div>
                  <div class="modal-row row">
                    <div v-for="(item,index) in btnTotalPrice.items"
                         class="modal-col col-3"
                         :class="{'active':index===btnTotalPrice.activeIndex}">
                      <div class="btn-item btn-price" @tap="onHandlePriceFilter(index)">{{item.label}}</div>
                    </div>
                  </div>
                  <div class="modal-slider">
                    <div class="modal-row row">
                      <div class="min-label col-6">{{minTotalPrice}}</div>
                      <div class="max-label col-6">{{maxTotalPrice}}</div>
                    </div>
                    <div class="modal-slider-bar">
                      <wux-slider
                        min="0"
                        step="10"
                        max="1000"
                        tipFormatter=""
                        controlled="{{true}}"
                        value="{{ sliderPriceValue }}"
                        trackStyle="{{trackStylePrice}}"
                        handleStyle="{{handleStylePrice}}"
                        @change="onHandleSliderChangePrice"></wux-slider>
                    </div>
                    <div class="modal-split"></div>
                  </div>
                </div>
              </div>
              <div class="modal-group">
                <div class="modal-block">
                  <div class="modal-label">面积</div>
                  <div class="modal-row row">
                    <div v-for="(item,index) in btnSize.items"
                         class="modal-col col-3"
                         :class="{'active':index===btnSize.activeIndex}">
                      <div class="btn-item btn-size" @tap="onHandleSizeFilter(index)">{{item.label}}</div>
                    </div>
                  </div>
                  <div class="modal-slider">
                    <div class="modal-row row">
                      <div class="min-label col-6">{{minSize}}</div>
                      <div class="max-label col-6">{{maxSize}}</div>
                    </div>
                    <div class="modal-slider-bar">
                      <wux-slider
                        min="0"
                        step="5"
                        max="500"
                        tipFormatter=""
                        controlled="{{true}}"
                        value="{{ sliderSizeValue }}"
                        trackStyle="{{trackStyleSize}}"
                        handleStyle="{{handleStyleSize}}"
                        @change="onHandleSliderChangeSize"></wux-slider>
                    </div>
                  </div>
                </div>
              </div>
            </scroll-view>
          </div>
          <div class="modal-footer">
            <div class="modal-button">
              <div class="btn btn-clear" @tap="onHandleClearFilter">重置</div>
              <div class="btn btn-confirm" @tap="onHandleConfirmFilter">确定</div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal tab" id="sort" :class="{'hide':!tab.items[2].isShow}">
        <div class="modal-bg" @tap="onHandleCloseModal"></div>
        <div class="modal-content">
          <div class="modal-header"></div>
          <div class="modal-body">
            <div class="modal-sort">
              <div class="btn btn-sort"
                   v-for="(item,index) in btnSort.items"
                   :class="{'active':index===btnSort.activeIndex}"
                   @tap="onHandleSortFilter(index)">{{item.label}}
              </div>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
  import wepy from '@wepy/core';
  import store from '../../../store';
  import Toast from '../../../mixins/toast';
  import {mapState, mapActions} from '@wepy/redux';
  import * as controller from './controller';

  wepy.page({
    store,
    mixins: [Toast],
    data: {
      timer: null,
      pageIndex: 1,
      pageSize: 10,
      isScroll: true,
      tab: {
        activeIndex: -1,
        items: [
          {
            index: 0,
            label: '区域',
            isShow: false
          },
          {
            index: 1,
            label: '筛选',
            isShow: false
          },
          {
            index: 2,
            label: '排序',
            isShow: false
          }
        ]
      },
      btnArea: {},
      btnSize: {
        activeIndex: -1,
        items: [
          {
            label: '50m²以下',
            value: {
              minArea: 0,
              maxArea: 50
            }
          },
          {
            label: '50-70m²',
            value: {
              minArea: 50,
              maxArea: 70
            }
          },
          {
            label: '70-90m²',
            value: {
              minArea: 70,
              maxArea: 90
            }
          },
          {
            label: '90-110m²',
            value: {
              minArea: 90,
              maxArea: 110
            }
          },
          {
            label: '110-130m²',
            value: {
              minArea: 110,
              maxArea: 130
            }
          },
          {
            label: '130-150m²',
            value: {
              minArea: 130,
              maxArea: 150
            }
          },
          {
            label: '150-200m²',
            value: {
              minArea: 150,
              maxArea: 200
            }
          },
          {
            label: '200-300m²',
            value: {
              minArea: 200,
              maxArea: 300
            }
          },
          {
            label: '300-500m²',
            value: {
              minArea: 300,
              maxArea: 500
            }
          },
          {
            label: '500m²以上',
            value: {
              minArea: 500,
              maxArea: 100000000
            }
          }
        ],
        value: []
      },
      btnTotalPrice: {
        activeIndex: -1,
        items: [
          {
            label: '100万以下',
            value: {
              minTotalPrice: 0,
              maxTotalPrice: 100
            }
          },
          {
            label: '100-200万',
            value: {
              minTotalPrice: 100,
              maxTotalPrice: 200
            }
          },
          {
            label: '200-300万',
            value: {
              minTotalPrice: 200,
              maxTotalPrice: 300
            }
          },
          {
            label: '300-400万',
            value: {
              minTotalPrice: 300,
              maxTotalPrice: 400
            }
          },
          {
            label: '400-500万',
            value: {
              minTotalPrice: 400,
              maxTotalPrice: 500
            }
          },
          {
            label: '500-600万',
            value: {
              minTotalPrice: 500,
              maxTotalPrice: 600
            }
          },
          {
            label: '600-700万',
            value: {
              minTotalPrice: 600,
              maxTotalPrice: 700
            }
          },
          {
            label: '700-800万',
            value: {
              minTotalPrice: 700,
              maxTotalPrice: 800
            }
          },
          {
            label: '800-900万',
            value: {
              minTotalPrice: 800,
              maxTotalPrice: 900
            }
          },
          {
            label: '900-1000万',
            value: {
              minTotalPrice: 900,
              maxTotalPrice: 1000
            }
          },
          {
            label: '1000万以上',
            value: {
              minTotalPrice: 1000,
              maxTotalPrice: 100000000
            }
          }
        ],
        value: []
      },
      btnLayout: {
        activeIndex: -1,
        items: [
          {
            label: '一室',
            value: '1室'
          },
          {
            label: '二室',
            value: '2室'
          },
          {
            label: '三室',
            value: '3室'
          },
          {
            label: '四室',
            value: '4室'
          },
          {
            label: '五室',
            value: '5室'
          },
          {
            label: '五室以上',
            value: '5室+'
          }
        ],
        value: ''
      },
      btnStyle: {
        activeIndex: -1,
        items: [
          {
            label: '毛坯',
            value: '毛坯'
          },
          {
            label: '简装',
            value: '简装'
          },
          {
            label: '精装',
            value: '精装'
          },
          {
            label: '豪装',
            value: '豪装'
          },
          {
            label: '其他',
            value: '其他'
          }
        ],
        value: ''
      },
      btnDirection: {
        activeIndex: -1,
        items: [
          {
            label: '朝东',
            value: '朝东'
          },
          {
            label: '朝南',
            value: '朝南'
          },
          {
            label: '朝北',
            value: '朝北'
          },
          {
            label: '朝西',
            value: '朝西'
          },
          {
            label: '南北',
            value: '南北'
          }
        ],
        value: ''
      },
      btnFloor: {
        activeIndex: -1,
        items: [
          {
            label: '底层',
            value: '底层'
          },
          {
            label: '低楼层',
            value: '低楼层'
          },
          {
            label: '中楼层',
            value: '中楼层'
          },
          {
            label: '高楼层',
            value: '高楼层'
          },
          {
            label: '顶层',
            value: '顶层'
          }
        ],
        value: ''
      },
      btnSort: {
        activeIndex: -1,
        items: [
          {
            label: '默认排序',
            value: null
          },
          {
            label: '总价从低到高',
            value: {
              sortKey: 'totalPrice',
              sortValue: 'asc'
            }
          },
          {
            label: '总价从高到底',
            value: {
              sortKey: 'totalPrice',
              sortValue: 'desc'
            }
          },
          {
            label: '面积从小到大',
            value: {
              sortKey: 'floorArea',
              sortValue: 'asc'
            }
          },
          {
            label: '面积从大到小',
            value: {
              sortKey: 'floorArea',
              sortValue: 'desc'
            }
          }
        ],
        value: null
      },
      minTotalPrice: '价格',
      maxTotalPrice: '不限',
      sliderPriceValue: [0, 1000],
      trackStylePrice: [
        'background: -webkit-linear-gradient(left, #FFCC00, #FF9900);'
      ],
      handleStylePrice: [
        'transform:translate3d(-50%,-50%,0) scale(1.0);box-shadow:0 0 15px rgba(0,0,0,.15)',
        'transform:translate3d(-50%,-50%,0) scale(1.0);box-shadow:0 0 15px rgba(0,0,0,.15)'
      ],
      minSize: '面积',
      maxSize: '不限',
      sliderSizeValue: [0, 500],
      trackStyleSize: [
        'background: -webkit-linear-gradient(left, #FFCC00, #FF9900);'
      ],
      handleStyleSize: [
        'transform:translate3d(-50%,-50%,0) scale(1.0);box-shadow:0 0 15px rgba(0,0,0,.15)',
        'transform:translate3d(-50%,-50%,0) scale(1.0);box-shadow:0 0 15px rgba(0,0,0,.15)'
      ]
    },
    computed: {
      ...mapState(controller.STATES)
    },
    methods: {
      ...mapActions(controller.ACTIONS),
      onHandleTabChange(index) {
        this.tab.items.map((item) => {
          if (index !== item.index) {
            this.tab.items[item.index].isShow = false;
          } else {
            if (this.tab.items[index].isShow) {
              this.tab.items[index].isShow = false;
              this.tab.activeIndex = -1;
              this.isScroll = true;
            } else {
              this.tab.items[index].isShow = true;
              this.tab.activeIndex = index;
              this.isScroll = false;
            }
          }
        });
      },
      onHandleCloseModal() {
        this.isScroll = true;
        this.tab.items.map((item) => {
          if (item.isShow) {
            item.isShow = false;
          }
        });
        this.tab.activeIndex = -1;
      },
      onHandleSliderChangePrice(e) {
        let maxLabel = '';
        const value = e.$wx.detail.value;
        const minTotalPrice = value[0];
        const maxTotalPrice = value[1];
        if (!minTotalPrice) {
          if (maxTotalPrice >= 1000) {
            maxLabel = '不限';
            this.btnTotalPrice.value = [];
          } else {
            maxLabel = maxTotalPrice + '万元以下';
            this.btnTotalPrice.value = [{minTotalPrice: 0, maxTotalPrice}];
          }
        } else {
          if (maxTotalPrice >= 1000) {
            maxLabel = minTotalPrice + '万元以上';
            this.btnTotalPrice.value = [{minTotalPrice, maxTotalPrice: 100000000}];
          } else {
            maxLabel = minTotalPrice + '-' + maxTotalPrice + '元';
            this.btnTotalPrice.value = [{minTotalPrice, maxTotalPrice}];
          }
        }
        this.sliderPriceValue = value;
        this.btnTotalPrice.activeIndex = -1;
        this.maxTotalPrice = maxLabel;
      },
      onHandleSliderChangeSize(e) {
        let maxLabel = '';
        const value = e.$wx.detail.value;
        const minSize = value[0];
        const maxSize = value[1];
        if (!minSize) {
          if (maxSize >= 500) {
            maxLabel = '不限';
            this.btnSize.value = [];
          } else {
            maxLabel = maxSize + 'm²以下';
            this.btnSize.value = [{minArea: 0, maxArea: maxSize}];
          }
        } else {
          if (maxSize >= 500) {
            maxLabel = minSize + 'm²以上';
            this.btnSize.value = [{minArea: minSize, maxArea: 100000000}];
          } else {
            maxLabel = minSize + '-' + maxSize + 'm²';
            this.btnSize.value = [{minArea: minSize, maxArea: maxSize}];
          }
        }
        this.sliderSizeValue = value;
        this.btnSize.activeIndex = -1;
        this.maxSize = maxLabel;
      },
      onHandlePriceFilter(index) {
        const {activeIndex, items} = this.btnTotalPrice;
        if (activeIndex === index) {
          this.btnTotalPrice.activeIndex = -1;
          this.btnTotalPrice.value = [];
        } else {
          this.btnTotalPrice.activeIndex = index;
          this.btnTotalPrice.value = [items[index]['value']];
        }
        this.maxTotalPrice = '不限';
        this.sliderPriceValue = [0, 1000];
      },
      onHandleSizeFilter(index) {
        const {activeIndex, items} = this.btnSize;
        if (activeIndex === index) {
          this.btnSize.activeIndex = -1;
          this.btnSize.value = [];
        } else {
          this.btnSize.activeIndex = index;
          this.btnSize.value = [items[index]['value']];
        }
        this.maxSize = '不限';
        this.sliderSizeValue = [0, 500];
      },
      onHandleLayoutFilter(index) {
        const {activeIndex, items} = this.btnLayout;
        if (activeIndex === index) {
          this.btnLayout.activeIndex = -1;
          this.btnLayout.value = '';
        } else {
          this.btnLayout.activeIndex = index;
          this.btnLayout.value = items[index]['value'];
        }
      },
      onHandleStyleFilter(index) {
        const {activeIndex, items} = this.btnStyle;
        if (activeIndex === index) {
          this.btnStyle.activeIndex = -1;
          this.btnStyle.value = '';
        } else {
          this.btnStyle.activeIndex = index;
          this.btnStyle.value = items[index]['value'];
        }
      },
      onHandleDirectionFilter(index) {
        const {activeIndex, items} = this.btnDirection;
        if (activeIndex === index) {
          this.btnDirection.activeIndex = -1;
          this.btnDirection.value = '';
        } else {
          this.btnDirection.activeIndex = index;
          this.btnDirection.value = items[index]['value'];
        }
      },
      onHandleFloorFilter(index) {
        const {activeIndex, items} = this.btnFloor;
        if (activeIndex === index) {
          this.btnFloor.activeIndex = -1;
          this.btnFloor.value = '';
        } else {
          this.btnFloor.activeIndex = index;
          this.btnFloor.value = items[index]['value'];
        }
      },
      onHandleSortFilter(index) {
        const {activeIndex, items} = this.btnSort;
        if (activeIndex === index) {
          this.btnSort.activeIndex = -1;
          this.btnSort.value = null;
        } else {
          this.btnSort.activeIndex = index;
          this.btnSort.value = items[index]['value'];
        }
        this.onHandleCloseModal();
        this.pageIndex = 1;
        this.removeHouseReplace();
        this.exeAjaxSelectHouse();
      },
      onHandleClearArea() {
        this.btnArea.activeIndex = 0;
      },
      onHandleClearFilter() {
        this.btnLayout.activeIndex = -1;
        this.btnLayout.value = '';
        this.btnStyle.activeIndex = -1;
        this.btnStyle.value = '';
        this.btnDirection.activeIndex = -1;
        this.btnDirection.value = '';
        this.btnFloor.activeIndex = -1;
        this.btnFloor.value = '';
        this.maxSize = '不限';
        this.btnSize.activeIndex = -1;
        this.btnSize.value = [];
        this.sliderSizeValue = [0, 500];
        this.maxTotalPrice = '不限';
        this.btnTotalPrice.activeIndex = -1;
        this.btnTotalPrice.value = [];
        this.sliderPriceValue = [0, 1000];
      },
      onHandleScrollToLower() {
        if (this.timer) return;
        this.timer = setTimeout(() => {
          const {rows, totalCount} = this.isData;
          if (rows.length < totalCount) {
            this.exeAjaxSelectHouse();
          }
        }, 0);
      },
      onHandleChooseArea(index) {
        this.btnArea.activeIndex = index;
      },
      onHandleConfirmArea() {
        this.onHandleCloseModal();
        this.pageIndex = 1;
        this.removeHouseReplace();
        this.exeAjaxSelectHouse();
      },
      onHandleConfirmFilter() {
        this.onHandleCloseModal();
        this.pageIndex = 1;
        this.removeHouseReplace();
        this.exeAjaxSelectHouse();
      },
      onHandleRenderAreas() {
        this.btnArea = {
          activeIndex: 0,
          items: this.isArea
        };
      },
      exeAjaxSelectHouse() {
        const data = this.isData || {};
        const rows = data.rows || [];
        const params = this.getParams();
        this.ajaxSelectHouse(params)
          .then((res) => {
            const {success} = res.payload;
            if (success) {
              this.pageIndex++;
            } else {
              if (rows.length) {
                this.showToast('加载失败，请重试');
              }
            }
            this.timer = null;
            console.log(res);
          })
          .catch((err) => {
            if (rows.length) {
              this.showToast('加载失败，请重试');
            }
            this.timer = null;
            console.log(err);
          });
      },
      getParams() {
        const type = 2;
        const {pageIndex, pageSize, isCity, btnArea} = this;
        const city = isCity.fullname;
        const {activeIndex, items} = btnArea;
        const {fullname} = items[activeIndex];
        const area = fullname === '不限'
          ? '' : (fullname === '广德市' ? '广德县' : fullname);
        let params = {
          type,
          city,
          area,
          pageSize,
          pageIndex
        };

        const renovation = this.btnStyle.value;
        if (renovation) {
          params = {
            ...params,
            renovation
          };
        }

        const apart = this.btnLayout.value;
        if (apart) {
          params = {
            ...params,
            apart
          };
        }

        const direction = this.btnDirection.value;
        if (direction) {
          params = {
            ...params,
            direction
          };
        }

        const floors = this.btnFloor.value;
        if (floors) {
          params = {
            ...params,
            floors
          };
        }

        const totalPriceScopes = this.btnTotalPrice.value;
        if (totalPriceScopes.length) {
          params = {
            ...params,
            totalPriceScopes
          };
        }

        const areaScopes = this.btnSize.value;
        if (areaScopes.length) {
          params = {
            ...params,
            areaScopes
          };
        }

        const sort = this.btnSort.value;
        if (sort) {
          params = {
            ...params,
            ...sort
          };
        }
        return params;
      },
      onRefresh() {
        this.exeAjaxSelectHouse();
      }
    },

    onLoad() {
      this.removeHouseReplace();
      this.onHandleRenderAreas();
      this.exeAjaxSelectHouse();
    }
  });
</script>

<style scoped lang="less">
  @import "../../../assets/less/@media";
  @import "../../../assets/less/variable";

  .container {
    min-height: 100vh;
    .content {
      height: 100vh;
      .header {
        .tab-bar {
          width: 100%;
          display: flex;
          flex-wrap: wrap;
          position: fixed;
          top: 65px;
          left: 0;
          z-index: 1000;
          background-color: @white;
          box-shadow: 0 0 15px @boxShadow05;
          font-size: @fontSize28;
          text-align: center;
          color: @fontColor1;
          .tab-item {
            width: 33.333%;
            position: relative;
            padding: 10px 0;
            .tab-text {
              height: 20px;
              line-height: 20px;
              border-right: 0.5px solid @borderColor1;
              font-size: 0;
              .tab-label {
                display: inline-block;
                vertical-align: middle;
                font-size: @fontSize28;
              }
              &:after {
                content: '';
                display: inline-block;
                vertical-align: middle;
                margin-left: unit(20, rpx);
                transition: all 300ms ease;
                border-top: unit(12, rpx) solid @fontColor1;
                border-left: unit(8, rpx) solid @transparent;
                border-right: unit(8, rpx) solid @transparent;
              }
            }
            &.active {
              color: @theme2;
              .tab-text {
                &:after {
                  transform: rotate(180deg);
                  border-top-color: @theme2 !important;
                }
              }
            }
            &:last-child {
              .tab-text {
                border: none;
              }
            }
          }
        }
      }
      .body {
        height: 100%;
        position: relative;
        .context {
          height: 100%;
          padding-top: 105px;
          > .scroll-view {
            height: 100%;
          }
        }
      }
      .footer {
      }
      .modal {
        .modal-bg {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          z-index: 998;
          transition: all 300ms ease-out;
          background-color: rgba(0, 0, 0, .5);
        }
        .modal-content {
          position: fixed;
          top: 0;
          left: 0;
          z-index: 999;
          width: 100%;
          height: unit(850, rpx);
          padding-top: 105px;
          background-color: @white;
          transition: all 450ms ease-out;
          box-shadow: 0 0 15px @boxShadow15;
          .modal-header {
          }
          .modal-body {
            height: 100%;
            > .scroll-view {
              height: 100%;
            }
            .modal-group {
              padding: 0 unit(15, rpx);
              .modal-slider {
                padding: 0 unit(15, rpx);
                margin-top: unit(15, rpx);
              }
              .modal-split {
                width: unit(690, rpx);
                position: absolute;
                bottom: 0;
                left: unit(15, rpx);
                padding: 0 unit(15, rpx);
                border-bottom: 0.5px solid @borderColor1;
              }
              .modal-block {
                position: relative;
                padding: unit(30, rpx) 0;
              }
              .modal-slider-bar {
                padding: 0 unit(28, rpx);
              }
              .min-label,
              .max-label {
                height: unit(40, rpx);
                line-height: unit(40, rpx);
                margin-bottom: unit(20, rpx);
                font-size: @fontSize28;
                color: @fontColor2;
                &.max-label {
                  text-align: right;
                }
              }
              .modal-col {
                padding: unit(15, rpx);
                .btn-item {
                  overflow: hidden;
                  height: unit(60, rpx);
                  line-height: unit(60, rpx);
                  border-radius: unit(60, rpx);
                  background-color: @bgColor;
                  font-size: @fontSize24;
                  text-align: center;
                  color: @fontColor3;
                }
                &.active {
                  .btn-item {
                    background-color: @tagColor;
                    color: @theme2;
                  }
                }
              }
              .modal-label {
                height: unit(40, rpx);
                line-height: unit(40, rpx);
                margin-bottom: unit(10, rpx);
                padding: 0 unit(15, rpx);
                font-size: @fontSize28;
                color: @fontColor2;
              }
            }
            .modal-addr {
              display: flex;
              height: 100%;
              line-height: unit(90, rpx);
              letter-spacing: 0.5px;
              font-size: @fontSize30;
              color: @fontColor1;
              .modal-city {
                width: 35%;
                text-align: center;
                .modal-city-item {
                  &.active {
                    color: @theme2;
                  }
                }
              }
              .modal-area {
                width: 65%;
                background-color: @bgColor;
                .scroll-view {
                  height: 100%;
                  .modal-area-item {
                    padding: 0 unit(40, rpx);
                    color: @fontColor1;
                    &.active {
                      color: @theme2;
                    }
                  }
                }
              }
            }
            .modal-sort {
              .btn-sort {
                height: unit(100, rpx);
                line-height: unit(100, rpx);
                border-bottom: 0.5px solid @borderColor1;
                font-size: @fontSize28;
                text-align: center;
                color: @fontColor2;
                &.active {
                  color: @theme2;
                }
                &:last-child {
                  border: none;
                }
              }
            }
          }
          .modal-footer {
            .modal-button {
              position: absolute;
              left: 0;
              bottom: 0;
              z-index: 1000;
              width: 100%;
              display: flex;
              flex-wrap: wrap;
              text-align: center;
              .btn {
                height: unit(100, rpx);
                line-height: unit(100, rpx);
                font-size: @fontSize32;
                letter-spacing: 1px;
                color: @white;
                &.btn-clear {
                  width: 35%;
                  background-color: @white;
                  border-top: 0.5px solid @borderColor1;
                  color: @fontColor2;
                }
                &.btn-confirm {
                  width: 65%;
                  background: -webkit-linear-gradient(left, @theme1, @theme2);
                }
              }
            }
          }
        }
        &#address,
        &#filter {
          .modal-content {
            padding-bottom: unit(100, rpx);
          }
        }
        &#sort {
          .modal-content {
            height: calc(105px + 5 * unit(100, rpx));
          }
        }
        &.hide {
          .modal-bg {
            opacity: 0;
            visibility: hidden;
          }
          .modal-content {
            visibility: hidden;
            transform: translateY(unit(-850, rpx));
          }
          &#sort {
            .modal-content {
              transform: translateY(-355px);
            }
          }
        }
      }
    }
  }
</style>

<config>
  {
  disableScroll:true,
  navigationStyle:'custom',
  usingComponents: {
  'error': '../../../components/error/error',
  'empty': '../../../components/empty/empty',
  'wux-slider':'module:wux-weapp/dist/slider',
  'top-bar': '../../../components/top-bar/top-bar',
  'loading': '../../../components/loading/loading',
  'house-item': '../../../components/house-item/house-item',
  'loading-more': '../../../components/loading-more/loading-more',
  }
  }
</config>
